require 'formula'

def postgres_installed?
  `which pg_config`.length > 0
end

def build_intl?
  false
end

class Php<%= name %> < Formula

  url '<%= @url %>'
  sha1 '<%= @sha %>'
  version '<%= @brew_version %>'

  homepage 'http://php.net'

  # So PHP extensions don't report missing symbols
  skip_clean ['bin', 'sbin']

  depends_on 'freetds' if build.include? 'with-mssql'
  depends_on 'freetype'
  depends_on 'gettext'
  depends_on 'gmp' => :optional
  depends_on 'icu4c' if build.include?('with-intl') && build_intl?
  depends_on 'imap-uw' if build.include? 'with-imap'
  depends_on 'jpeg'
  depends_on 'libpng'
  depends_on 'openssl' if build.include? 'with-homebrew-openssl'
  depends_on 'homebrew/dupes/tidy' if build.include? 'with-tidy'
  depends_on 'unixodbc' => :optional
  depends_on 'homebrew/dupes/zlib'

  # Sanity Checks
  if build.include? 'with-pgsql'
    depends_on 'postgresql' => :recommended unless postgres_installed?
  end

  if build.include?('with-cgi') && build.include?('with-fpm')
    raise "Cannot specify more than one executable to build."
  end

  option '32-bit', "Build 32-bit only."
  option 'homebrew-apxs', 'Build against apxs in Homebrew prefix'
  option 'with-debug', 'Compile with debugging symbols'
  option 'with-libmysql', 'Include (old-style) libmysql support'
  option 'without-mysql', 'Remove MySQL/MariaDB support'
  option 'with-pgsql', 'Include PostgreSQL support'
  option 'with-mssql', 'Include MSSQL-DB support'
  option 'with-cgi', 'Enable building of the CGI executable (implies --without-apache)'
  option 'with-fpm', 'Enable building of the fpm SAPI executable (implies --without-apache)'
  option 'without-apache', 'Build without shared Apache 2.0 Handler module'
  option 'with-intl', 'Include internationalization support'
  option 'with-imap', 'Include IMAP extension'
  option 'without-pear', 'Build without PEAR'
  option 'with-tidy', 'Include Tidy support'
  option 'with-thread-safety', 'Build with thread safety'
  option 'with-homebrew-openssl', 'Include OpenSSL support via Homebrew'
  option 'without-bz2', 'Build without bz2 support'

  def config_path
    "<%= @version_config_root %>"
  end

  def home_path
    File.expand_path("~")
  end

  def build_apache?
    false #DIE APACHE
  end

  def php_version
    '<%= @version %>'
  end

  def install

    # Not removing all pear.conf and .pearrc files from PHP path results in
    # the PHP configure not properly setting the pear binary to be installed
    config_pear = "#{config_path}/pear.conf"
    user_pear = "#{home_path}/pear.conf"
    config_pearrc = "#{config_path}/.pearrc"
    user_pearrc = "#{home_path}/.pearrc"
    if File.exists?(config_pear) || File.exists?(user_pear) || File.exists?(config_pearrc) || File.exists?(user_pearrc)
      opoo "Backing up all known pear.conf and .pearrc files"
      opoo <<-INFO
If you have a pre-existing pear install outside
         of homebrew-php, or you are using a non-standard
         pear.conf location, installation may fail.
INFO
      mv(config_pear, "#{config_pear}-backup") if File.exists? config_pear
      mv(user_pear, "#{user_pear}-backup") if File.exists? user_pear
      mv(config_pearrc, "#{config_pearrc}-backup") if File.exists? config_pearrc
      mv(user_pearrc, "#{user_pearrc}-backup") if File.exists? user_pearrc
    end

    begin
      _install
      rm_f("#{config_pear}-backup") if File.exists? "#{config_pear}-backup"
      rm_f("#{user_pear}-backup") if File.exists? "#{user_pear}-backup"
      rm_f("#{config_pearrc}-backup") if File.exists? "#{config_pearrc}-backup"
      rm_f("#{user_pearrc}-backup") if File.exists? "#{user_pearrc}-backup"
    rescue Exception => e
      mv("#{config_pear}-backup", config_pear) if File.exists? "#{config_pear}-backup"
      mv("#{user_pear}-backup", user_pear) if File.exists? "#{user_pear}-backup"
      mv("#{config_pearrc}-backup", config_pearrc) if File.exists? "#{config_pearrc}-backup"
      mv("#{user_pearrc}-backup", user_pearrc) if File.exists? "#{user_pearrc}-backup"
      throw e
    end
  end

  def install_args
    args = [
      "--prefix=#{prefix}",
      "--localstatedir=#{var}",
      "--sysconfdir=#{config_path}",
      "--with-config-file-path=#{config_path}",
      "--with-config-file-scan-dir=#{config_path}/conf.d",
      "--with-iconv-dir=/usr",
      "--enable-dba",
      "--with-ndbm=/usr",
      "--enable-exif",
      "--enable-soap",
      "--enable-wddx",
      "--enable-ftp",
      "--enable-sockets",
      "--enable-zip",
      "--enable-pcntl",
      "--enable-shmop",
      "--enable-sysvsem",
      "--enable-sysvshm",
      "--enable-sysvmsg",
      "--enable-mbstring",
      "--enable-mbregex",
      "--enable-bcmath",
      "--enable-calendar",
      "--with-zlib=#{Formula.factory('zlib').opt_prefix}",
      "--with-ldap",
      "--with-ldap-sasl=/usr",
      "--with-xmlrpc",
      "--with-kerberos=/usr",
      "--with-xsl=/usr",
      "--with-gd",
      "--enable-gd-native-ttf",
      "--with-freetype-dir=#{Formula.factory('freetype').opt_prefix}",
      "--with-jpeg-dir=#{Formula.factory('jpeg').opt_prefix}",
      "--with-png-dir=#{Formula.factory('libpng').opt_prefix}",
      "--with-gettext=#{Formula.factory('gettext').opt_prefix}",
      "--with-snmp=/usr",
      "--with-libedit",
      "--mandir=#{man}",
      "--with-mhash",
      "--with-curl",
      "--enable-fpm",
      "--with-fpm-user=<%= scope.lookupvar "::boxen_user" %>",
      "--with-fpm-group=staff",
      "--with-openssl=/usr",
    ]

    unless build.include? 'without-bz2'
      args << '--with-bz2=/usr'
    end

    if build.include? 'with-debug'
      args << "--enable-debug"
    else
      args << "--disable-debug"
    end

    if build.include? 'with-gmp'
      args << "--with-gmp=#{Formula.factory('gmp').opt_prefix}"
    end

    if build.include? 'with-imap'
      args << "--with-imap=#{Formula.factory('imap-uw').opt_prefix}"
      args << "--with-imap-ssl=/usr"
    end

    if build.include? 'with-mssql'
      args << "--with-mssql=#{Formula.factory('freetds').opt_prefix}"
      args << "--with-pdo-dblib=#{Formula.factory('freetds').opt_prefix}"
    end

    if build.include? 'with-libmysql'
      args << "--with-mysql-sock=/tmp/mysql.sock"
      args << "--with-mysqli=#{$HOMEBREW_PREFIX}/bin/mysql_config"
      args << "--with-mysql=#{$HOMEBREW_PREFIX}"
      args << "--with-pdo-mysql=#{$HOMEBREW_PREFIX}"
    elsif !build.include? 'without-mysql'
      args << "--with-mysql-sock=/tmp/mysql.sock"
      args << "--with-mysqli=mysqlnd"
      args << "--with-mysql=mysqlnd"
      args << "--with-pdo-mysql=mysqlnd"
    end

    if build.include?('with-pgsql')
      if File.directory?(Formula.factory('postgresql').opt_prefix.to_s)
        args << "--with-pgsql=#{Formula.factory('postgresql').opt_prefix}"
        args << "--with-pdo-pgsql=#{Formula.factory('postgresql').opt_prefix}"
      else
        args << "--with-pgsql=#{`pg_config --includedir`}"
        args << "--with-pdo-pgsql=#{`which pg_config`}"
      end
    end

    if build.include? 'with-tidy'
      args << "--with-tidy=#{Formula.factory('tidy').opt_prefix}"
    end

    if build.include? 'with-unixodbc'
      args << "--with-unixODBC=#{Formula.factory('unixodbc').opt_prefix}"
      args << "--with-pdo-odbc=unixODBC,#{Formula.factory('unixodbc').opt_prefix}"
    else
      args << "--with-iodbc"
      args << "--with-pdo-odbc=generic,/usr,iodbc"
    end

    if build.include? 'without-pear'
      args << "--without-pear"
    end

    if build.include? 'with-thread-safety'
      args << "--enable-maintainer-zts"
    end

    args
  end

  def skip_pear_config_set?
    build.include? 'without-pear'
  end

  def _install
    args = install_args

    system "./buildconf" if build.head?
    system "./configure", *args

    if build_apache?
      # Use Homebrew prefix for the Apache libexec folder
      inreplace "Makefile",
        "INSTALL_IT = $(mkinstalldirs) '$(INSTALL_ROOT)/usr/libexec/apache2' && $(mkinstalldirs) '$(INSTALL_ROOT)/private/etc/apache2' && /usr/sbin/apxs -S LIBEXECDIR='$(INSTALL_ROOT)/usr/libexec/apache2' -S SYSCONFDIR='$(INSTALL_ROOT)/private/etc/apache2' -i -a -n php5 libs/libphp5.so",
        "INSTALL_IT = $(mkinstalldirs) '#{libexec}/apache2' && $(mkinstalldirs) '$(INSTALL_ROOT)/private/etc/apache2' && /usr/sbin/apxs -S LIBEXECDIR='#{libexec}/apache2' -S SYSCONFDIR='$(INSTALL_ROOT)/private/etc/apache2' -i -a -n php5 libs/libphp5.so"
    end

    if build.include?('with-intl') && build_intl?
      inreplace 'Makefile' do |s|
        s.change_make_var! "EXTRA_LIBS", "\\1 -lstdc++"
      end
    end

    system "make"
    ENV.deparallelize # parallel install fails on some systems
    system "make install"

    chmod_R 0775, lib+"php"

    system bin+"pear", "config-set", "php_ini", config_path+"php.ini" unless skip_pear_config_set?

#    sbin.install 'sapi/fpm/init.d.php-fpm' => "php#{php_version_path.to_s}-fpm" if build.include? 'with-fpm'

#    if build.include?('with-fpm') && !File.exists?(config_path+"php-fpm.conf")
#      config_path.install "sapi/fpm/php-fpm.conf"
#      inreplace config_path+"php-fpm.conf" do |s|
#        s.sub!(/^;?daemonize\s*=.+$/,'daemonize = no')
#        s.sub!(/^;include\s*=.+$/,";include=#{config_path}/fpm.d/*.conf")
#        s.sub!(/^;?pm\.max_children\s*=.+$/,'pm.max_children = 10')
#        s.sub!(/^;?pm\.start_servers\s*=.+$/,'pm.start_servers = 3')
#        s.sub!(/^;?pm\.min_spare_servers\s*=.+$/,'pm.min_spare_servers = 2')
#        s.sub!(/^;?pm\.max_spare_servers\s*=.+$/,'pm.max_spare_servers = 5')
#      end
 #   end
  end

  def test
    if build.include?('with-fpm')
      system "#{sbin}/php-fpm -y #{config_path}/php-fpm.conf -t"
    end
  end

end
